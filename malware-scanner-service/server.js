const clamd = require('clamdjs');
const express = require('express');
const fs = require('fs');
const bodyParser = require('body-parser');
const { BlobServiceClient } = require('@azure/storage-blob');

const app = express();
const PORT = process.env.PORT || 8080;
const scanner = clamd.createScanner('127.0.0.1', 3310);

const AZURE_STORAGE_CONNECTION_STRING = process.env.AZURE_STORAGE_CONNECTION_STRING;
const AZURE_CONTAINER = process.env.AZURE_CONTAINER || 'delst-storage';

app.use(bodyParser.json());

const run = () => app.listen(PORT, () => {
  console.log(`Server started on port ${PORT}`);
})

/**
 * Route that is invoked by a Cloud Function when a malware scan is requested
 * for a document uploaded to GCS.
 *
 * @param {object} req The request payload
 * @param {object} res The HTTP response object
 */
app.post('/scan', async (req, res) => {
  let filepath = `/tmp/${req.body.filename}`;
  try {
    const blobServiceClient = await BlobServiceClient.fromConnectionString(AZURE_STORAGE_CONNECTION_STRING);
    const containerClient = blobServiceClient.getContainerClient(AZURE_CONTAINER);
    const blockBlobClient = containerClient.getBlockBlobClient(req.body.filename);

    await blockBlobClient.downloadToFile(filepath);

    console.log(`File path is: ${filepath}`);

    const result = await scanner.scanFile(filepath);
    if (result.indexOf('OK') > -1) {
      // Respond to API client
      res.json({status: 'clean'});
    } else {

      // Respond to API client
      res.json({
        message: result,
        status: 'infected'
      });
    }
  } catch(e) {
    console.error(`Error processing the file ${filepath}`, e)
    res.status(500).json({
      message: e.toString(),
      status: 'error'
    });
  } finally {
    // Delete file from the local directory on the container
    deleteLocalCopy(filepath);
  }
})


const deleteLocalCopy = (loc) => {
  fs.unlink(loc, (err) => {
    if (err) {
      console.error(`Error deleting file ${loc}`);
    } else {
      console.log(`File ${loc} was deleted successfully`);
    }
  })
}

run();
