const clamd = require('clamdjs');
const express = require('express');
const fs = require('fs');
const bodyParser = require('body-parser');
const {Storage} = require('@google-cloud/storage');

const app = express();
const PORT = process.env.PORT || 8080;
const scanner = clamd.createScanner('127.0.0.1', 3310);
const CLOUD_STORAGE_BUCKET = process.env.BUCKET;

app.use(bodyParser.json());

// Creates a client
const storage = new Storage();

const run = () => app.listen(PORT, () => {
  console.log(`Server started on port ${PORT}`);
})

/**
 * Route that is invoked by a Cloud Function when a malware scan is requested
 * for a document uploaded to GCS.
 *
 * @param {object} req The request payload
 * @param {object} res The HTTP response object
 */
app.post('/scan', async (req, res) => {
  console.log('Request body', req.body);
  let filename = req.body.filename;
  try {
    const options = {
      destination: `/unscanned_files/${filename}`
    };

    //Downloads the file
    await storage
      .bucket(CLOUD_STORAGE_BUCKET)
      .file(req.body.filename)
      .download(options);

    console.log(`Filename is: /unscanned_files/${filename}`);

    const result = await scanner.scanFile(`/unscanned_files/${filename}`);
    if (result.indexOf('OK') > -1) {
      // Respond to API client
      res.json({status: 'clean'});
    } else {

      // Respond to API client
      res.json({
        message: result,
        status: 'infected'
      });
    }
  } catch(e) {
    console.error(`Error processing the file ${filename}`, e)
    res.status(500).json({
      message: e.toString(),
      status: 'error'
    });
  } finally {
    // Delete file from the local directory on the container
    deleteLocalCopy(`/unscanned_files/${filename}`, filename);
  }
})


const deleteLocalCopy = (loc, filename) => {
  fs.unlink(loc, (err) => {
    if (err) {
      console.error(`Error deleting file ${filename}`);
    } else {
      console.log(`File ${filename} was deleted successfully`);
    }
  })
}

run();